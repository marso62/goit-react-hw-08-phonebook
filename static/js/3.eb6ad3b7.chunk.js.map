{"version":3,"sources":["components/ContactForm/ContactForm.module.css","services/fetchContacts.js","redux/contacts/contactSelectors.js","components/Alert/Alert.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsViews.js"],"names":["module","exports","axios","defaults","baseURL","fetchContacts","dispatch","a","contactAction","fetchContactsRequest","get","then","res","fetchContactsSuccess","data","catch","error","fetchContactsError","addContact","name","number","addContactsRequest","post","addContactsSuccess","addContactsError","removeContacts","id","removeContactsRequest","delete","removeContactsSuccess","removeContactsError","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","contact","toLowerCase","includes","getContactByID","_","contactId","find","connect","prop","length","isContact","nameContact","text","CSSTransition","in","appear","timeout","classNames","unmountOnExit","className","INITIAL_CONTACT_STATE","numberContact","ContactForm","inputName","target","setState","value","inputNumber","handleSubmit","e","preventDefault","onAddContact","props","this","filtered","itemsArray","map","onSubmit","style","Contact_form","type","onChange","placeholder","pattern","Component","contactSelectors","contactOperations","onDeleteContact","contactOperation","onClick","listNull","TransitionGroup","component","key","mapDispatchToProps","inputFilter","contactActions","changeFilter","ContactsViews","onFetchContacts","isLoadingContacts","color","height","width","contactsOperation"],"mappings":"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","file":"static/js/3.eb6ad3b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact_form\":\"ContactForm_Contact_form__9cbYX\"};","import axios from \"axios\";\nimport contactAction from \"../redux/contacts/contactAction\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\n\nconst fetchContacts = () => async (dispatch) => {\n  dispatch(contactAction.fetchContactsRequest());\n  await axios\n    .get(\"/contacts\")\n    .then((res) => {\n      dispatch(contactAction.fetchContactsSuccess(res.data));\n    })\n    .catch((error) => dispatch(contactAction.fetchContactsError(error)));\n};\n\nconst addContact = ({ name, number }) => async (dispatch) => {\n  dispatch(contactAction.addContactsRequest());\n  await axios\n    .post(\"/contacts\", { name, number })\n    .then(({ data }) => dispatch(contactAction.addContactsSuccess(data)))\n    .catch((error) => dispatch(contactAction.addContactsError(error)));\n};\n\nconst removeContacts = (id) => async (dispatch) => {\n  dispatch(contactAction.removeContactsRequest());\n  await axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(contactAction.removeContactsSuccess(id)))\n    .catch((error) => dispatch(contactAction.removeContactsError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  removeContacts,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContacts = (state) => state.contacts.items;\nconst getLoading = (state) => state.contacts.loading;\nconst getFilter = (state) => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nconst getContactByID = createSelector(\n  [(_, contactId) => contactId, getContacts],\n  (contactId, contacts) => contacts.find((contact) => contact.id === contactId)\n);\n\nexport default {\n  getLoading,\n  getFilter,\n  getVisibleContacts,\n  getContacts,\n  getContactByID,\n};\n","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\nimport \"./alert.css\";\n\nconst Alert = ({ text }) => (\n  <CSSTransition\n    in={true}\n    appear={true}\n    timeout={500}\n    classNames=\"anim\"\n    unmountOnExit\n  >\n    <div className=\"alert\">{text}</div>\n  </CSSTransition>\n);\n\nconst mapStateToProps = (state, prop) => {\n  const { items } = state.contacts;\n\n  if (items.length > 4) {\n    return { isContact: true, nameContact: 10 };\n  }\n  return { isContact: false };\n};\n\nexport default connect(mapStateToProps, null)(Alert);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport contactOperations from \"../../services/fetchContacts\";\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\nimport Alert from \"../Alert/Alert\";\n\nimport style from \"./ContactForm.module.css\";\n\nconst INITIAL_CONTACT_STATE = {\n  nameContact: \"\",\n  numberContact: \"\",\n};\n\nclass ContactForm extends Component {\n  state = INITIAL_CONTACT_STATE;\n\n  inputName = ({ target }) => {\n    this.setState({\n      nameContact: target.value,\n    });\n  };\n\n  inputNumber = ({ target }) => {\n    this.setState({\n      numberContact: target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { nameContact, numberContact } = this.state;\n    const { onAddContact } = this.props;\n    onAddContact(nameContact, numberContact);\n    this.setState({ ...INITIAL_CONTACT_STATE });\n  };\n\n  render() {\n    const { nameContact, numberContact } = this.state;\n    const { itemsArray } = this.props;\n\n    const filtered = itemsArray\n      .map(({ name }) => name.toLowerCase())\n      .includes(nameContact.toLowerCase());\n\n    return (\n      <>\n        {filtered && <Alert text=\"Contact already exist\" />}\n        <form onSubmit={this.handleSubmit} className={style.Contact_form}>\n          <label>\n            Name\n            <input\n              className={style.inputName}\n              type=\"text\"\n              value={nameContact}\n              onChange={this.inputName}\n            />\n          </label>\n          <label>\n            Number\n            <input\n              placeholder=\"XXX-XX-XX\"\n              type=\"tel\"\n              pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n              value={numberContact}\n              onChange={this.inputNumber}\n            />\n          </label>\n\n          <button type=\"submit\">ADD CONTACT</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProprs = (state) => ({\n  itemsArray: contactSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAddContact: (name, number) =>\n      dispatch(contactOperations.addContact({ name, number })),\n  };\n};\n\nexport default connect(mapStateToProprs, mapDispatchToProps)(ContactForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport contactOperation from \"../../services/fetchContacts\";\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\nimport \"./ContacList.css\";\n\nconst ContactListItem = ({ name, number, onDeleteContact }) => (\n  <li className=\"phone_Item\">\n    <span className=\"phone_name\">{name}</span>\n    <span className=\"phone_number\">{number}</span>\n    <button type=\"button\" onClick={onDeleteContact}></button>\n  </li>\n);\n\nconst mapStateToProps = (state, { id }) => ({\n  ...contactSelectors.getContactByID(state, id),\n});\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onDeleteContact: () => dispatch(contactOperation.removeContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport ContactListItem from \"./ContactListItem\";\nimport Alert from \"../Alert/Alert\";\n\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\n\nimport \"./ContacList.css\";\n\nconst ContactList = ({ contacts }) => {\n  const listNull = contacts.length === 0 ? true : false;\n  return (\n    <>\n      {listNull && <Alert text=\"No have contact\" />}\n      <TransitionGroup component=\"ul\" className=\"contact_list\">\n        {contacts.map(({ id }) => (\n          <CSSTransition key={id} timeout={250} classNames=\"list\">\n            <ContactListItem id={id} />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactSelectors.getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps, null)(ContactList);\n","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\nimport contactActions from \"../../redux/contacts/contactAction\";\nimport contactSelectors from \"../../redux/contacts/contactSelectors\";\n\nimport \"./Filter.css\";\n\nconst Filter = ({ value, inputFilter, isContact }) => (\n  <>\n    {isContact && (\n      <CSSTransition\n        in={true}\n        appear={true}\n        classNames=\"find\"\n        timeout={500}\n        unmountOnExit\n      >\n        <div className=\"findContact\">\n          <p>Find contacts by name or number</p>\n          <input\n            className=\"inputName\"\n            type=\"text\"\n            value={value}\n            onChange={({ target }) => inputFilter(target.value)}\n          />\n        </div>\n      </CSSTransition>\n    )}\n  </>\n);\n\nconst mapStateToProps = (state) => {\n  if (contactSelectors.getContacts(state).length > 1) {\n    return { value: contactSelectors.getFilter(state), isContact: true };\n  }\n  return { value: contactSelectors.getFilter(state) };\n};\n\nconst mapDispatchToProps = {\n  inputFilter: contactActions.changeFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport Loader from \"react-loader-spinner\";\nimport \"../../node_modules/react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\n\nimport contactsOperation from \"../services/fetchContacts\";\nimport contactSelectors from \"../redux/contacts/contactSelectors\";\n\nclass ContactsViews extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"phoneBook_container\">\n          <CSSTransition\n            in={true}\n            appear={true}\n            classNames=\"title_anim\"\n            timeout={500}\n            unmountOnExit\n          >\n            <h1 className=\"title\">Phonebook</h1>\n          </CSSTransition>\n\n          <CSSTransition\n            in={true}\n            appear={true}\n            classNames=\"form_fade\"\n            timeout={500}\n            unmountOnExit\n          >\n            <ContactForm />\n          </CSSTransition>\n          <Filter />\n          {this.props.isLoadingContacts && (\n            <Loader\n              type=\"ThreeDots\"\n              color=\"#f5f505\"\n              height={50}\n              width={100}\n              timeout={3000} //3 secs\n            />\n          )}\n          <ContactList />\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: contactSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperation.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsViews);\n"],"sourceRoot":""}